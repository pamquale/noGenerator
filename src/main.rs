fn main() { let product: u32 = (Box::into_raw(Box::new(vec![' '])) as usize) .to_string() .chars() .filter(|c: &char| c.is_digit(10) && *c != '0') .map(|c: char| c.to_digit(10).unwrap()) .product::<u32>(); let result: u32 = (product as f64 * std::f64::consts::PI * (1.0 + 5.0_f64.sqrt()) / 2.0) as u32 % 100; let final_result: u32 = if result == 0 { 1 } else { result };println!("{}", final_result); }